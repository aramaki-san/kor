#!/usr/bin/env ruby

# This is an example script demonstrating how to automatically ingest various
# kinds of data into a ConedaKOR installation.

# You will have to set this so that the correct installation and environment can
# be loaded. On production instances, make sure you change the environment to
# "production".
KOR_ROOT="/home/schepp/Desktop/coneda/projects/kor/src"
RAILS_ENV="development"

# loading the rails environment
require "#{KOR_ROOT}/config/environment" unless defined?(Rails)

# redirect the logging (default is the file log/production.log)
# ... to stdout
# ActiveRecord::Base.logger = Logger.new(STDOUT)
# .. or to a file
# ActiveRecord::Base.logger = Logger.new(File.open '/path/to/some/file.log')

# we are wrapping the code to catch validation errors
begin
  # destroy all users, credentials and collections but the admin and the guest
  User.without_predefined.destroy_all
  Credential.destroy_all
  Collection.destroy_all

  # destroy all kinds, entities, relations and relationships except the Medium kind
  Kind.without_media.each{|r| r.really_destroy!}
  Relation.all.each{|r| r.really_destroy!}

  # create a user and fetch the admin user
  jdoe = User.create!(:name => "jdoe", :password => "secret", :email => "jdoe@example.com")
  admin = User.where(:name => "admin").first

  # create credentials (user groups)
  admins = Credential.create!(:name => "admins")
  editors = Credential.create!(:name => "editors")

  # add 'jdoe' to 'editors'
  editors.users << jdoe
  admins.users << admin

  # create a collection
  project_x = Collection.create!(:name => "Project X")

  # allow 'editors' and 'admins' to view collection 'Project X'.
  project_x.grant [:view, :edit], :to => [admins, editors]

  # create a few entity types (the 'Medium' type is created automatically by 
  # seeding the DB)
  people = Kind.create!(:name => "Person", :plural_name => "People")
  institutions = Kind.create!(:name => "Institution", :plural_name => "Institutions")
  works = Kind.create!(:name => "Work", :plural_name => "Works", :fields => [
    Field.new(
      :type => "Field::String",
      :name => "dimensions",
      :show_label => "Dimensions",
      :show_on_entity => true
    ),
    Field.new(
      :type => "Field::String",
      :name => "technique",
      :show_label => "Technique",
      :show_on_entity => true
    )
  ])

  # create a few relations
  has_created = Relation.create!(:name => "has created", :reverse_name => "was created by")
  shows = Relation.create!(:name => "shows", :reverse_name => "is shown by")
  equivalent = Relation.create!(:name => "is equivalent to", :reverse_name => "is equivalent to")
  is_located_at = Relation.create!(:name => "is located at", :reverse_name => "is location of")

  # create some entities
  mona_lisa = Entity.create!(
    :kind => works,
    :collection => project_x,
    :name => "Mona Lisa",
    :dataset => {"dimensions" => "77 cm Ã— 53 cm"},
    :properties => [{"label" => "Material", "value" => "Oil on poplar"}]
  )
  leonardo = Entity.create!(
    :kind => people,
    :collection => project_x,
    :name => "Leonardo"
  )
  picture = Entity.create!(
    :kind => Kind.medium_kind,
    :collection => project_x,
    :medium => Medium.new(:image => File.open("#{KOR_ROOT}/spec/fixtures/image_a.jpg"))
  )

  # and now related the entities
  Relationship.relate_and_save(mona_lisa, "was created by", leonardo)
  Relationship.relate_and_save(mona_lisa, "is shown by", picture)

  # or create some data from CSV
  File.read("#{KOR_ROOT}/spec/fixtures/works.csv").split("\n").each do |line|
    name, dimensions, material, museum = line.split(";")
    work = Entity.create!(
      :kind => works,
      :collection => project_x,
      :name => name,
      :distinct_name => 'Some distinction to make this thing unique',
      :comment => 'this is a comment',
      :dataset => {
        "dimensions" => dimensions,
        "technique" => "painting"
      },
      :properties => [{"label" => "Material", "value" => material}],
      :datings => [
        EntityDating.new(:label => 'Dating', :dating_string => '2012')
      ]
    )

    institution = Entity.find_or_create_by_name!(museum) do |i|
      i.kind = institutions
      i.collection = project_x
    end

    Relationship.relate_and_save(work, "is located at", institution)
  end

  # # here is how to remove duplicate relationships
  # scope = DirectedRelationship.
  #   group(:from_id, :relation_name, :to_id).
  #   having("count(*) > 1")
  # scope.count.each do |criteria, c|
  #   fid, rn, tid = criteria
  #   relationships = DirectedRelationship.
  #     where(from_id: fid, relation_name: rn, to_id: tid).
  #     map{|dr| dr.relationship}
  #   # and here you can decide which of the relationships to drop, e.g. all but
  #   # the first:
  #   relationships[1..-1].each{|r| r.destroy}
  # end

  # images are converted within a background job. Don't forget to work off that
  # queue unless you have a background job running:
  # Delayed::Worker.new.work_off
rescue ActiveRecord::RecordInvalid => e
  puts e.backtrace
  puts "full validation messages: " + e.record.errors.full_messages.inspect
end